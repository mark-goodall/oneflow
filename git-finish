#!/bin/bash
set -e
masterBranch="master"

if [[ "$1" = "--h" ]] ; then
   echo "Finishing up feature and issue branches: ";
   echo "  - git finish";
   echo ""
   echo "Finishing up release and hotfix branches: ";
   echo "  - git finish <annotation>";
   echo	"    where annotation is optional";
   echo ""
   echo "This command will rebase feature branches, tag release and hotfix branches"
   echo "and merge them back into $masterBranch."
   echo "Afterwards, the feature/release/hotfix branch will be cleaned up"
   exit 1;
fi

if ! [ -d .git ] ; then
	if ! [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ] ; then
		echo "Current directory is not a git folder."
		exit 1;
	fi
fi

branch=$(git rev-parse --abbrev-ref HEAD)
shortBranch=$(echo $branch| cut -d'/' -f 2)

cleanup_localbranch () {
echo "Delete the local branch $1"
git branch -D $1;
}

cleanup_remotebranch () {
if [[ "$(git branch -a | egrep "remotes/origin/$1" | wc -l)" = "1" ]]; then
    # This code should be called once we are ready to FINISH a release|hotfix branch -> there should be no reason at that point to keep these alive
    # Just clean up the local branch without providing a user option as this causes issues when run alongside gita  
    echo "Delete the remote branch remotes/origin/$1"
    git push origin :$1;	
fi
}

create_pullrequest () {
git push origin $1
originUrl=$(git config --get remote.origin.url)

vsoRegex=".visualstudio.com"
if [[ "$originUrl" =~ $vsoRegex ]] ; then
   originUrl="$originUrl/pullrequestcreate?targetRef=master&sourceRef=$1"
fi	

case $( uname -s ) in
  Darwin)  open='open';;
  MINGW*)  open='start';;
  MSYS*)   open='start';;
  CYGWIN*) open='cygstart';;
  *)       open='xdg-open';;
esac

# Allow printing the url if BROWSER=echo
if [[ $BROWSER != "echo" ]]; then
  exec &>/dev/null
fi


# open it in a browser
${BROWSER:-$open} "$originUrl"

cleanup_localbranch $1
}

mergetomaster () {
echo "Merging to $1"
git merge --no-ff  $2
git push --follow-tags origin $1
}

if [[ $branch =~ ^(feature|issue).* ]]; then
    echo Pulling latest $masterBranch from origin
	git pull origin $masterBranch:$masterBranch
	
    echo Rebasing branch using $masterBranch
	git rebase -i $masterBranch		
elif [[ $branch =~ ^(release|hotfix).* ]]; then
    echo Tagging release branch
	
	if [ "$1" = "" ]; then
		git tag V$shortBranch
	else
		git tag -a V$shortBranch -m "$1"
	fi	
else 
	echo "Currently not on a feature/issue/release/hotfix branch";
	exit 1;
fi

git checkout $masterBranch

if [[ $branch =~ ^(feature|issue|release|hotfix).* ]]; then	
  # We should never merge into master from this script -> we can instead use github to do it manually
  # Here should just always create a pull request. 
  echo "Create a pull request"
  create_pullrequest $branch; exit 0;
fi
